[{"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\index.js":"1","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\App.js":"2","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reportWebVitals.js":"3","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\store.js":"4","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\home.js":"5","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\login.js":"6","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\private-route.js":"7","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reducers\\index.js":"8","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reducers\\auth-reducer.js":"9","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\types.js":"10","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\auth\\login.js":"11","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\auth\\get-user.js":"12","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\navbar.js":"13","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\letter-avatar.js":"14","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\auth\\logout.js":"15","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\cars\\get-cars.js":"16","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reducers\\car-reducer.js":"17","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\car-detail.js":"18","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\list-item.js":"19","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\car-add.js":"20","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\address-form.js":"21","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\cars\\get-manufacturers.js":"22","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\cars\\get-suppliers.js":"23"},{"size":641,"mtime":1609152050124,"results":"24","hashOfConfig":"25"},{"size":1760,"mtime":1609344408413,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1609150077583,"results":"27","hashOfConfig":"25"},{"size":355,"mtime":1609150467248,"results":"28","hashOfConfig":"25"},{"size":6286,"mtime":1609432435166,"results":"29","hashOfConfig":"25"},{"size":6878,"mtime":1609155740472,"results":"30","hashOfConfig":"25"},{"size":499,"mtime":1609151771690,"results":"31","hashOfConfig":"25"},{"size":221,"mtime":1609334201085,"results":"32","hashOfConfig":"25"},{"size":1477,"mtime":1609156720949,"results":"33","hashOfConfig":"25"},{"size":691,"mtime":1609421468863,"results":"34","hashOfConfig":"25"},{"size":1085,"mtime":1609161228204,"results":"35","hashOfConfig":"25"},{"size":955,"mtime":1609160408297,"results":"36","hashOfConfig":"25"},{"size":2647,"mtime":1609160425120,"results":"37","hashOfConfig":"25"},{"size":1980,"mtime":1609160772899,"results":"38","hashOfConfig":"25"},{"size":462,"mtime":1609160865562,"results":"39","hashOfConfig":"25"},{"size":903,"mtime":1609342879784,"results":"40","hashOfConfig":"25"},{"size":2163,"mtime":1609421029674,"results":"41","hashOfConfig":"25"},{"size":14384,"mtime":1609431729184,"results":"42","hashOfConfig":"25"},{"size":628,"mtime":1609341485738,"results":"43","hashOfConfig":"25"},{"size":760,"mtime":1609422592503,"results":"44","hashOfConfig":"25"},{"size":19404,"mtime":1609427789615,"results":"45","hashOfConfig":"25"},{"size":995,"mtime":1609421684348,"results":"46","hashOfConfig":"25"},{"size":901,"mtime":1609421501689,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"hbazx0",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\index.js",[],["102","103"],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\App.js",["104","105"],"import { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Home from './pages/home';\nimport Login from './pages/login';\nimport PrivateRoute from './components/private-route';\nimport Navbar from './components/navbar';\nimport CarDetail from './pages/car-detail';\nimport CarAdd from './pages/car-add';\nimport { getUser } from './actions/auth/get-user';\n\nconst App = () => {\n    const { isLoading } = useSelector((state) => state.auth);\n    const dispatch = useDispatch();\n\n    const getUserCb = useCallback(() => dispatch(getUser()), [\n        dispatch,\n        getUser,\n    ]);\n\n    useEffect(() => {\n        console.log('GET USER CALLED');\n        getUserCb();\n    }, []);\n\n    return (\n        <Router>\n            <Navbar />\n            {isLoading ? (\n                <div\n                    style={{\n                        width: '100%',\n                        height: '90%',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                    }}\n                >\n                    <CircularProgress />\n                </div>\n            ) : (\n                <Switch>\n                    <Route exact path='/login' component={Login} />\n                    <PrivateRoute exact path='/' Children={Home} />\n                    <PrivateRoute exact path='/:id' Children={CarDetail} />\n                    <PrivateRoute exact path='/cars/add' Children={CarAdd} />\n                </Switch>\n            )}\n        </Router>\n    );\n};\n\nexport default App;\n","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reportWebVitals.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\store.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\home.js",["106","107","108"],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\login.js",["109","110"],"import React, { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, Redirect } from 'react-router-dom';\r\nimport validator from 'validator';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport { loginUser } from '../actions/auth/login';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function SignIn() {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [closeError, setCloseError] = useState(true);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { isAuthenticated: isAuth, isLoading, errors } = useSelector(\r\n        (state) => state.auth,\r\n    );\r\n\r\n    const login = useCallback(\r\n        (email, password) => dispatch(loginUser({ email, password })),\r\n        [dispatch, loginUser],\r\n    );\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (\r\n            validator.isEmail(email) &&\r\n            validator.isLength(password, { min: 6 })\r\n        ) {\r\n            login(email, password);\r\n            console.log('REDIRECTING TO HOMEPAGE');\r\n            history.push('/');\r\n        }\r\n    };\r\n\r\n    const renderErrors = () => {\r\n        if (errors && errors.length > 0) {\r\n            return (\r\n                <Collapse in={closeError}>\r\n                    <Alert\r\n                        severity='error'\r\n                        onClose={() => setCloseError(false)}\r\n                    >\r\n                        <AlertTitle>Error</AlertTitle>\r\n                        {errors.map((error) => error)}\r\n                    </Alert>\r\n                </Collapse>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {!isAuth ? (\r\n                <Container component='main' maxWidth='xs'>\r\n                    <CssBaseline />\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockOutlinedIcon />\r\n                        </Avatar>\r\n                        <Typography component='h1' variant='h5'>\r\n                            Sign in\r\n                        </Typography>\r\n                        <form\r\n                            className={classes.form}\r\n                            noValidate\r\n                            onSubmit={onSubmit}\r\n                        >\r\n                            {renderErrors()}\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                id='email'\r\n                                label='Email Address'\r\n                                name='email'\r\n                                autoComplete='email'\r\n                                autoFocus\r\n                                error={\r\n                                    email !== '' && !validator.isEmail(email)\r\n                                }\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='normal'\r\n                                required\r\n                                fullWidth\r\n                                name='password'\r\n                                label='Password'\r\n                                type='password'\r\n                                id='password'\r\n                                error={\r\n                                    password !== '' &&\r\n                                    !validator.isLength(password, { min: 6 })\r\n                                }\r\n                                autoComplete='current-password'\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        value='remember'\r\n                                        color='primary'\r\n                                    />\r\n                                }\r\n                                label='Remember me'\r\n                            />\r\n                            <Button\r\n                                type='submit'\r\n                                fullWidth\r\n                                variant='contained'\r\n                                color='primary'\r\n                                className={classes.submit}\r\n                            >\r\n                                Sign In\r\n                            </Button>\r\n                            <Grid container>\r\n                                <Grid item xs>\r\n                                    <Link href='#' variant='body2'>\r\n                                        Forgot password?\r\n                                    </Link>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Link href='#' variant='body2'>\r\n                                        {\"Don't have an account? Sign Up\"}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </div>\r\n                </Container>\r\n            ) : (\r\n                <Redirect to='/' />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\private-route.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reducers\\index.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reducers\\auth-reducer.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\types.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\auth\\login.js",["111"],"import Cookies from 'js-cookie';\r\nimport { AuthActionTypes } from '../types';\r\n\r\nexport const loginUser = (data) => (dispatch) => {\r\n    fetch('http://localhost:8080/api/personels/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data),\r\n    })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n            if (res.data) {\r\n                dispatch({\r\n                    type: AuthActionTypes.LOGIN_SUCCESS,\r\n                    payload: res.data[0],\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: AuthActionTypes.LOGIN_FAIL,\r\n                    payload: {\r\n                        error: res.error,\r\n                    },\r\n                });\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: AuthActionTypes.LOGIN_FAIL,\r\n                payload: {\r\n                    error: err,\r\n                },\r\n            });\r\n        });\r\n};\r\n","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\auth\\get-user.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\navbar.js",["112"],"import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport Container from '@material-ui/core/Container';\r\nimport LetterAvatar from './letter-avatar';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        flex: {\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n        },\r\n    }),\r\n);\r\n\r\nconst Navbar = () => {\r\n    const classes = useStyles();\r\n    const { isAuthenticated: isAuth, isLoading, user } = useSelector(\r\n        (state) => state.auth,\r\n    );\r\n\r\n    const renderPhoto = () => {\r\n        if (isLoading) {\r\n            return <CircularProgress />;\r\n        }\r\n\r\n        if (isAuth) {\r\n            return (\r\n                <LetterAvatar\r\n                    firstLetter={user.first_name.toUpperCase().charAt(0) || 'U'}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <RouterLink to='/login'>\r\n                <Button variant='contained'>Login</Button>\r\n            </RouterLink>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position='static'>\r\n                <Container>\r\n                    <Toolbar className={classes.flex}>\r\n                        <RouterLink to='/'>\r\n                            <IconButton\r\n                                edge='start'\r\n                                className={classes.menuButton}\r\n                                color='inherit'\r\n                                aria-label='menu'\r\n                            >\r\n                                <HomeIcon\r\n                                    style={{ fill: '#EEE' }}\r\n                                    width='125%'\r\n                                />\r\n                            </IconButton>\r\n                        </RouterLink>\r\n                        {renderPhoto()}\r\n                    </Toolbar>\r\n                </Container>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\letter-avatar.js",["113"],"import React, { useState, useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { logout } from '../actions/auth/logout';\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        orange: {\r\n            color: theme.palette.getContrastText(deepOrange[500]),\r\n            backgroundColor: deepOrange[500],\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function LetterAvatar({ firstLetter }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const history = useHistory();\r\n\r\n    const handleLogout = useCallback(() => dispatch(logout()), [\r\n        dispatch,\r\n        logout,\r\n    ]);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleLout = () => {\r\n        handleLogout();\r\n        history.push('/');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button type='button' onClick={handleClick}>\r\n                <Avatar className={classes.orange}>{firstLetter}</Avatar>\r\n            </Button>\r\n            <Menu\r\n                id='simple-menu'\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                <MenuItem onClick={handleClose}>My account</MenuItem>\r\n                <MenuItem onClick={handleLout}>Logout</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\auth\\logout.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\cars\\get-cars.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\reducers\\car-reducer.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\car-detail.js",["114"],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\list-item.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\pages\\car-add.js",["115","116"],"import { useEffect, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport AddressForm from '../components/address-form';\r\nimport { getManufacturers } from '../actions/cars/get-manufacturers';\r\nimport { getSuppliers } from '../actions/cars/get-suppliers';\r\n\r\nconst CarAdd = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const getManufacturersCb = useCallback(() => dispatch(getManufacturers()), [\r\n        dispatch,\r\n        getManufacturers,\r\n    ]);\r\n    const getSuppliersCb = useCallback(() => dispatch(getSuppliers()), [\r\n        dispatch,\r\n        getSuppliers,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        getManufacturersCb();\r\n        getSuppliersCb();\r\n    });\r\n\r\n    return <AddressForm />;\r\n};\r\nexport default CarAdd;\r\n","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\components\\address-form.js",["117"],"import 'date-fns';\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    layout: {\r\n        width: 'auto',\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n            width: 600,\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n            marginTop: theme.spacing(6),\r\n            marginBottom: theme.spacing(6),\r\n            padding: theme.spacing(3),\r\n        },\r\n    },\r\n    stepper: {\r\n        padding: theme.spacing(3, 0, 5),\r\n    },\r\n    buttons: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(3),\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nexport default function AddressForm() {\r\n    const classes = useStyles();\r\n    const [selectedDate, setSelectedDate] = useState(new Date(Date.now()));\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [salePrice, setSalePrice] = useState(0);\r\n    const [purchasePrice, setPurchasePrice] = useState(0);\r\n    const [year, setYear] = useState(2020);\r\n    const [model, setModel] = useState('');\r\n    const [color, setColor] = useState('');\r\n    const [is_new, setIs_new] = useState('');\r\n    const [manufacturer, setManufacturer] = useState('');\r\n    const [supplier, setSupplier] = useState('');\r\n    const [files, setFiles] = useState([]);\r\n    const { manufacturers, suppliers } = useSelector((state) => state.car);\r\n    const {\r\n        user: { id },\r\n    } = useSelector((state) => state.auth);\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date);\r\n    };\r\n    const history = useHistory();\r\n\r\n    const onSubmit = async () => {\r\n        const data = {\r\n            title,\r\n            sale_price: salePrice,\r\n            purchase_price: purchasePrice,\r\n            is_sold: 'NOT SOLD',\r\n            description,\r\n            model: '123456',\r\n            year,\r\n            is_new: is_new ? 'NEW' : 'NOT NEW',\r\n            enter_date: selectedDate,\r\n            supplier_id: supplier,\r\n            personel_id: id,\r\n            car_manufacturer_id: manufacturer,\r\n            car_color_code: color,\r\n        };\r\n\r\n        await fetch('http://localhost:8080/api/cars', {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify(data),\r\n            method: 'POST',\r\n        });\r\n\r\n        history.push('/');\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <main className={classes.layout}>\r\n                <Paper className={classes.paper}>\r\n                    <Typography component='h1' variant='h4' align='center'>\r\n                        Araba Ekle\r\n                    </Typography>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <Typography variant='h6' gutterBottom>\r\n                            Car Information\r\n                        </Typography>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <TextField\r\n                                    required\r\n                                    id='title'\r\n                                    name='title'\r\n                                    label='Title'\r\n                                    fullWidth\r\n                                    autoComplete='title'\r\n                                    variant='outlined'\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    id='outlined-description-static'\r\n                                    label='Description'\r\n                                    multiline\r\n                                    required\r\n                                    rows={4}\r\n                                    variant='outlined'\r\n                                    value={description}\r\n                                    onChange={(e) =>\r\n                                        setDescription(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={6}>\r\n                                <FormControl fullWidth variant='outlined'>\r\n                                    <InputLabel htmlFor='outlined-adornment-amount'>\r\n                                        Sale Price\r\n                                    </InputLabel>\r\n                                    <OutlinedInput\r\n                                        id='outlined-adornment-amount'\r\n                                        value={salePrice}\r\n                                        required\r\n                                        onChange={(e) =>\r\n                                            setSalePrice(e.target.value)\r\n                                        }\r\n                                        endAdornment={\r\n                                            <InputAdornment position='end'>\r\n                                                ₺\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        labelWidth={60}\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <FormControl fullWidth variant='outlined'>\r\n                                    <InputLabel htmlFor='outlined-adornment-amount'>\r\n                                        Purchase Price\r\n                                    </InputLabel>\r\n                                    <OutlinedInput\r\n                                        required\r\n                                        id='outlined-adornment-amount'\r\n                                        value={purchasePrice}\r\n                                        onChange={(e) =>\r\n                                            setPurchasePrice(e.target.value)\r\n                                        }\r\n                                        endAdornment={\r\n                                            <InputAdornment position='end'>\r\n                                                ₺\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        labelWidth={60}\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <KeyboardDatePicker\r\n                                    fullWidth\r\n                                    required\r\n                                    disableToolbar\r\n                                    inputVariant='outlined'\r\n                                    format='MM/dd/yyyy'\r\n                                    margin='normal'\r\n                                    id='enter_date'\r\n                                    label='Enter Date'\r\n                                    value={selectedDate}\r\n                                    onChange={handleDateChange}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='outlined-basic'\r\n                                    label='Year'\r\n                                    variant='outlined'\r\n                                    value={year}\r\n                                    onChange={(e) => setYear(e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    required\r\n                                    id='outlined-basic'\r\n                                    label='Model'\r\n                                    variant='outlined'\r\n                                    value={model}\r\n                                    onChange={(e) => setModel(e.target.value)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl variant='outlined' fullWidth>\r\n                                    <InputLabel htmlFor='filled-age-native-simple'>\r\n                                        Is New ?\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        native\r\n                                        required\r\n                                        value={is_new}\r\n                                        onChange={(e) =>\r\n                                            setIs_new(e.target.value)\r\n                                        }\r\n                                        inputProps={{\r\n                                            name: 'is_new',\r\n                                            id: 'filled-is_new-native-simple',\r\n                                        }}\r\n                                    >\r\n                                        <option aria-label='None' value='' />\r\n                                        <option value={true}>New</option>\r\n                                        <option value={false}>Not New</option>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl variant='outlined' fullWidth>\r\n                                    <InputLabel htmlFor='filled-age-native-simple'>\r\n                                        Color\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        native\r\n                                        required\r\n                                        value={color}\r\n                                        onChange={(e) =>\r\n                                            setColor(e.target.value)\r\n                                        }\r\n                                        inputProps={{\r\n                                            name: 'color',\r\n                                            id: 'filled-color-native-simple',\r\n                                        }}\r\n                                    >\r\n                                        <option aria-label='None' value='' />\r\n                                        <option value={true}>Bej</option>\r\n                                        <option value={false}>Beyaz</option>\r\n                                        <option value={false}>Bordo</option>\r\n                                        <option value={false}>Füme</option>\r\n                                        <option value={false}>Gri</option>\r\n                                        <option value={false}>Gümüş Gri</option>\r\n                                        <option value={false}>\r\n                                            Kahverengi\r\n                                        </option>\r\n                                        <option value='dbfae870-f0c4-42d3-8c66-17d56d2928f4'>\r\n                                            Kırmızı\r\n                                        </option>\r\n                                        <option value={false}>Lacivert</option>\r\n                                        <option value={false}>Mavi</option>\r\n                                        <option value='51d96ebf-3c5f-41b7-937d-ab12649eca8e'>\r\n                                            Mor\r\n                                        </option>\r\n                                        <option value={false}>Pembe</option>\r\n                                        <option value={false}>Sarı</option>\r\n                                        <option value={false}>Siyah</option>\r\n                                        <option value={false}>Şampanya</option>\r\n                                        <option value={false}>Turkuaz</option>\r\n                                        <option value={false}>Turuncu</option>\r\n                                        <option value={false}>Yeşil</option>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl variant='outlined' fullWidth>\r\n                                    <InputLabel htmlFor='filled-age-native-simple'>\r\n                                        Manufacturer\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        fullWidth\r\n                                        native\r\n                                        required\r\n                                        value={manufacturer}\r\n                                        onChange={(e) =>\r\n                                            setManufacturer(e.target.value)\r\n                                        }\r\n                                        inputProps={{\r\n                                            name: 'manufacturer',\r\n                                            id:\r\n                                                'filled-manufacturer-native-simple',\r\n                                        }}\r\n                                    >\r\n                                        <option aria-label='None' value='' />\r\n                                        {manufacturers &&\r\n                                            manufacturers.map(\r\n                                                (manufacturer) => (\r\n                                                    <option\r\n                                                        key={manufacturer.id}\r\n                                                        value={manufacturer.id}\r\n                                                    >\r\n                                                        {manufacturer.name}\r\n                                                    </option>\r\n                                                ),\r\n                                            )}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl variant='outlined' fullWidth>\r\n                                    <InputLabel htmlFor='filled-supplier-native-simple'>\r\n                                        Supplier\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        variant='outlined'\r\n                                        native\r\n                                        required\r\n                                        value={supplier}\r\n                                        onChange={(e) =>\r\n                                            setSupplier(e.target.value)\r\n                                        }\r\n                                        inputProps={{\r\n                                            name: 'supplier',\r\n                                            id: 'filled-supplier-native-simple',\r\n                                        }}\r\n                                    >\r\n                                        <option aria-label='None' value='' />\r\n                                        {suppliers &&\r\n                                            suppliers.map((supplier) => (\r\n                                                <option\r\n                                                    key={supplier.id}\r\n                                                    value={supplier.id}\r\n                                                >\r\n                                                    {supplier.first_name}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <DropzoneArea\r\n                                    acceptedFiles={['image/*']}\r\n                                    onChange={(files) => setFiles(files)}\r\n                                    showFileNames\r\n                                    dropzoneText='Resimleri buraya sürükleyin veya seçmek için tıklayın'\r\n                                    showAlerts={false}\r\n                                    filesLimit={20}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <div className={classes.buttons}>\r\n                            <Button\r\n                                variant='contained'\r\n                                color='primary'\r\n                                className={classes.button}\r\n                                onClick={onSubmit}\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                    </MuiPickersUtilsProvider>\r\n                </Paper>\r\n            </main>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\cars\\get-manufacturers.js",[],"C:\\Users\\Emre\\code\\Nodejs\\stock-management-client\\src\\actions\\cars\\get-suppliers.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":18,"column":62,"nodeType":"124","endLine":21,"endColumn":6,"suggestions":"125"},{"ruleId":"122","severity":1,"message":"126","line":26,"column":8,"nodeType":"124","endLine":26,"endColumn":10,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":9,"column":8,"nodeType":"130","messageId":"131","endLine":9,"endColumn":17},{"ruleId":"122","severity":1,"message":"132","line":124,"column":62,"nodeType":"124","endLine":127,"endColumn":6,"suggestions":"133"},{"ruleId":"122","severity":1,"message":"134","line":131,"column":8,"nodeType":"124","endLine":131,"endColumn":10,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"136","line":48,"column":38,"nodeType":"130","messageId":"131","endLine":48,"endColumn":47},{"ruleId":"122","severity":1,"message":"137","line":54,"column":9,"nodeType":"124","endLine":54,"endColumn":30,"suggestions":"138"},{"ruleId":"128","severity":1,"message":"139","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":15},{"ruleId":"128","severity":1,"message":"140","line":4,"column":36,"nodeType":"130","messageId":"131","endLine":4,"endColumn":41},{"ruleId":"122","severity":1,"message":"141","line":27,"column":64,"nodeType":"124","endLine":30,"endColumn":6,"suggestions":"142"},{"ruleId":"128","severity":1,"message":"143","line":16,"column":8,"nodeType":"130","messageId":"131","endLine":16,"endColumn":11},{"ruleId":"122","severity":1,"message":"144","line":10,"column":80,"nodeType":"124","endLine":13,"endColumn":6,"suggestions":"145"},{"ruleId":"122","severity":1,"message":"146","line":14,"column":72,"nodeType":"124","endLine":17,"endColumn":6,"suggestions":"147"},{"ruleId":"128","severity":1,"message":"148","line":73,"column":12,"nodeType":"130","messageId":"131","endLine":73,"endColumn":17},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'getUser'. Either exclude it or remove the dependency array. Outer scope values like 'getUser' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["151"],"React Hook useEffect has a missing dependency: 'getUserCb'. Either include it or remove the dependency array.",["152"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","React Hook useCallback has an unnecessary dependency: 'getCars'. Either exclude it or remove the dependency array. Outer scope values like 'getCars' aren't valid dependencies because mutating them doesn't re-render the component.",["153"],"React Hook useEffect has a missing dependency: 'getCarsCb'. Either include it or remove the dependency array.",["154"],"'isLoading' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'loginUser'. Either exclude it or remove the dependency array. Outer scope values like 'loginUser' aren't valid dependencies because mutating them doesn't re-render the component.",["155"],"'Cookies' is defined but never used.","'Theme' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'logout'. Either exclude it or remove the dependency array. Outer scope values like 'logout' aren't valid dependencies because mutating them doesn't re-render the component.",["156"],"'Box' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'getManufacturers'. Either exclude it or remove the dependency array. Outer scope values like 'getManufacturers' aren't valid dependencies because mutating them doesn't re-render the component.",["157"],"React Hook useCallback has an unnecessary dependency: 'getSuppliers'. Either exclude it or remove the dependency array. Outer scope values like 'getSuppliers' aren't valid dependencies because mutating them doesn't re-render the component.",["158"],"'files' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"159","fix":"163"},{"desc":"164","fix":"165"},{"desc":"159","fix":"166"},{"desc":"159","fix":"167"},{"desc":"159","fix":"168"},{"desc":"159","fix":"169"},"Update the dependencies array to be: [dispatch]",{"range":"170","text":"171"},"Update the dependencies array to be: [getUserCb]",{"range":"172","text":"173"},{"range":"174","text":"171"},"Update the dependencies array to be: [getCarsCb]",{"range":"175","text":"176"},{"range":"177","text":"171"},{"range":"178","text":"171"},{"range":"179","text":"171"},{"range":"180","text":"171"},[745,787],"[dispatch]",[881,883],"[getUserCb]",[5550,5595],[5653,5655],"[getCarsCb]",[2020,2041],[1020,1064],[426,480],[555,605]]